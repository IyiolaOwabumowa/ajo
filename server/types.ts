import {LargeNumberLike} from 'crypto';
import {Document} from 'mongoose';
import {Strategy as LocalStrategy} from 'passport-local';

type role = 'user' | 'admin';
type parent = 'user' | 'circle';

export interface IUser extends Document {
  firstname?: string;
  lastname?: string;
  username: string, 
  phone: String;
  email: string;
  password?: string;
  active: boolean;
  circles: string[];
  notifications: INotifications[];
  settings: ISettings;
  dob?: Date;
  occupation?: string;
  walletId: string;
  comparePasswords: (password: string, done: any) => LocalStrategy;
  changePassword: (
    currentpassword: string,
    newpassword: string,
    done: any,
  ) => any;
  token: string;
  topics: string[];
}

export interface ICircle extends Document {
  _creator: string;
  circlename: string;
  capacity: number;
  expires: Date;
  fee: number;
  // deduction: Deduction;
  walletId: string;
  members: Array<Members>;
  invites: Array<IUser | string>;
  round: Round;
  started: boolean;
  paused: boolean;
}
interface INotifications {
  title: string;
  content: string;
  createdAt: Date;
}
interface ISettings {
  push: boolean;
  dnd: boolean;
}
export interface IWallet {
  balance: number;
  parent: parent;
  transactions: {
    debit: TransactionObject[];
    credit: TransactionObject[];
  };
  bankdetails: BankDetails;
}

interface BankDetails {
  bankcode: String;
  accountnumber: number;
  recipientcode: string;
  email: string;
  authorization: object
}

interface TransactionObject {
  amount: number;
  initiatorId: string; //circleid;
  initiator: string; //'circle';
  reference: string; //'autogenerated id';
  createdAt: Date;
}

interface Deduction {
  price: number;
  timer: number;
}

export interface Members {
  _id: string;
  trials: number;
  walletId: string;
  warnings: number;
  paid: boolean;
  deactivated: boolean;
}

export interface IPersonal {
  firstname: string;
  lastname: string;
  dob: Date;
  occupation: string;
}

interface Round {
  count: number;
  duration: number;
  funded: Array<IUser | string>;
  funding: Array<IUser | string>;
  fundingNow: string;
  fundingNext: string;
  lastRoundEndDate: Date;
}
